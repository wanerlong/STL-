#include "stdafx.h"
#include<vector>
#include<iostream>
#include <unordered_set>
#include <unordered_map>
#include<algorithm>
#include<ctime>
#include<cstdlib>
#include<cstdio>
#include<stdexcept>
#include<string>
const long ASIZE = 100000L;
using namespace std;
long get_a_target_long()
{
	long target = 0;
	cout << "target (0~" << RAND_MAX << "): ";
	cin >> target;
	return target;
}
string get_a_target_string()
{
	long target = 0;
	char buf[10];
	cout << "target (0~" << RAND_MAX << "): ";
	cin >> target;
	sprintf_s(buf,10,"%d",target);
	return string(buf);
}
int comparLongs(const void*a, const void *b)
{
	return(*(long*)a - *(long*)b);
}
int compareStrings(const void *a, const void *b)
{
	if (*(string*)a > *(string*)b)
		return 1;
	else if (*(string*)a < *(string*)b)
		return -1;
	else
		return 0;
}

void test_unordered_multiset(long &value) {
	cout << "\ntest_unordered_multiset().......... \n";

	unordered_multiset <string> c;
	char buf[10];

	clock_t timeStart = clock();
	for (long i = 0; i < value; ++i) {
		try {
			sprintf_s(buf, 10, "%d", rand());
			c.insert(string(buf));
		}
		catch (exception &p) {
			cout << "i=" << i << " " << p.what() << endl;
			abort();
		}
	}
	cout << "milli-seconds : " << (clock() - timeStart) << endl;
	cout << "unordered_multiset.size()= " << c.size() << endl;
	cout << "unordered_multiset.max_size()= " << c.max_size() << endl;    //357913941
	cout << "unordered_multiset.bucket_count()= " << c.bucket_count() << endl;
	cout << "unordered_multiset.load_factor()= " << c.load_factor() << endl;//载重因子
	cout << "unordered_multiset.max_load_factor()= " << c.max_load_factor() << endl;
	cout << "unordered_multiset.max_bucket_count()= " << c.max_bucket_count() << endl;
	for (unsigned i = 0; i < 10; ++i) {
		cout << "bucket #" << i << " has " << c.bucket_size(i) << " elements.\n";
	}

	string target = get_a_target_string();
	{
		timeStart = clock();
		auto pItem = find(c.begin(), c.end(), target);    //比 unordered_multiset::find() 慢很多
		cout << "std::find(), milli-seconds : " << (clock() - timeStart) << endl;
		if (pItem != c.end())
			cout << "found, " << *pItem << endl;
		else
			cout << "not found! " << endl;
	}

	{
		timeStart = clock();
		auto pItem = c.find(target);        //比 std::find() 快很多
		cout << "c.find(), milli-seconds : " << (clock() - timeStart) << endl;
		if (pItem != c.end())
			cout << "found, " << *pItem << endl;
		else
			cout << "not found! " << endl;
	}
}

void test_unordered_multimap(long &value) {
	cout << "\ntest_unordered_multimap().......... \n";

	unordered_multimap<long, string> c;
	char buf[10];

	clock_t timeStart = clock();
	for (long i = 0; i < value; ++i) {
		try {
			sprintf_s(buf, 10, "%d", rand());
			//multimap 不可使用 [] 進行 insertion
			c.insert(pair<long, string>(i, buf));
		}
		catch (exception &p) {
			cout << "i=" << i << " " << p.what() << endl;
			abort();
		}
	}
	cout << "milli-seconds : " << (clock() - timeStart) << endl;
	cout << "unordered_multimap.size()= " << c.size() << endl;
	cout << "unordered_multimap.max_size()= " << c.max_size() << endl;

	long target = get_a_target_long();
	timeStart = clock();
	auto pItem = c.find(target);
	cout << "c.find(), milli-seconds : " << (clock() - timeStart) << endl;
	if (pItem != c.end())
		cout << "found, value=" << (*pItem).second << endl;
	else
		cout << "not found! " << endl;
}
int _tmain(int argc, _TCHAR* argv[])
{
	long select;
	cout << "how many elements: ";
	cin >> select;
	test_unordered_multimap(select);
	test_unordered_multiset(select);
	system("pause");
}


